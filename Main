Option Explicit
Const wdReplaceAll = 2

Public Sub Main()
'Remove_WhiteSpaces
'Adverb_RemoveHypen
MyList_SentenceCase
End Sub

Private Sub Remove_WhiteSpaces()

Dim objSelection
Set objSelection = Selection
objSelection.HomeKey (wdStory)

Do
    With objSelection.Find
        .ClearFormatting
        .Text = " [ ]@([! ])"
        .MatchAllWordForms = False
        .MatchSoundsLike = False
        .MatchFuzzy = False
        .MatchWildcards = True
        .Forward = True
        .Replacement.Text = Chr(32) & "\1"
        .Execute , , , , , , , , , , wdReplaceAll
    End With
Loop While objSelection.Find.Found

End Sub

Private Sub Adverb_RemoveHypen()

Dim objSelection
Set objSelection = Selection
objSelection.HomeKey (wdStory)

Do
    With objSelection.Find
        .ClearFormatting
        .Text = "ly>[-^=^+]"
        .MatchAllWordForms = False
        .MatchSoundsLike = False
        .MatchFuzzy = False
        .MatchWildcards = True
        .Forward = True
        .Replacement.Text = "ly"
        .Execute , , , , , , , , , , wdReplaceAll
    End With
Loop While objSelection.Find.Found

End Sub

Function UCase_FirstCharList()
'<init>
Dim objDoc As Document
Set objDoc = ActiveDocument
'</init>
'<loop>
Dim i As Integer
For i = objDoc.ListParagraphs.Count To 1 Step -1
    
    Dim para_Range As Range
    Set para_Range = objDoc.ListParagraphs(i).Range
        'search for all the useful characters
        If para_Range.Text Like "*[a-zA-Z]*" Then
            Dim ilast_word As Integer
            For ilast_word = para_Range.words.Count To 1 Step -1
                'search for the truetype paragraph end
                If Trim(para_Range.words(ilast_word)) Like "*[a-zA-Z0-9.?!:-_+]*" Then
                    Exit For
                End If
            Next
        para_Range.words(1).Characters(1).Text = LCase(para_Range.words(1).Characters(1).Text)
        End If
Next
'</loop>
End Function
Sub AutoSpellCorrect()
Dim Rng As Range
For Each Rng In ActiveDocument.Range.SpellingErrors
  Rng.Comments.Add Rng, "Check spelling"
Next
End Sub

==================================================
Private Sub Words_ToLower()
Dim arev As Revisions
Dim objPara As Paragraph
Dim objWord As Range

For Each objPara In ActiveDocument.Paragraphs
If Not objPara.Range.Characters.Last.Previous Like "[.!?;:-]" Then
    If MsgBox(objPara.Range.Text, vbYesNo, "Is this a title?") = vbYes Then
        For Each objWord In objPara.Range.words
            If IsInArray(Trim(LCase(objWord))) = True Then
                objWord.Case = wdLowerCase
               ' objWord.Comments.Add objWord, "Hit"
            End If
        Next
    End If
End If
Next

End Sub

Function IsInArray(stringToBeFound As String) As Boolean
  Dim i As Integer
  Dim arr() As Variant
  arr = Array("for", "and", "nor", "but", "or", "about", "among", _
  "beyond", "during", "including", "on", "throughout", "upon", "above", _
  "around", "but", "except", "into", "out", "to", "with", "across", "at", "by", _
  "following", "like", "over", "towards", "within", "after", "before", "concerning", _
  "for", "near", "plus", "under", "without", "against", "behind", "despite", "from", _
  "of", "since", "until", "regarding", "along", "between", "down", "in", "off", _
  "through", "up", "versus", "considering", "the", "a", "an", "to", "as")

For i = LBound(arr) To UBound(arr)
    If arr(i) = stringToBeFound Then
        IsInArray = True
        Exit Function
    End If
Next i
IsInArray = False
End Function
 
